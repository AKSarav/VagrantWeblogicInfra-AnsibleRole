domain_name  = os.environ.get("DOMAIN_NAME", '{{domain_name}}')
admin_name  = os.environ.get("ADMIN_NAME", "AdminServer")
admin_listen_port   = int(os.environ.get("ADMIN_LISTEN_PORT", "{{admin_ListenPort}}"))
domain_path  = '{{domainroot}}/{{domain_name}}'
production_mode = os.environ.get("PRODUCTION_MODE", "prod")
administration_port_enabled = os.environ.get("ADMINISTRATION_PORT_ENABLED", "false")



print('domain_name                 : [%s]' % domain_name);
print('admin_listen_port           : [%s]' % admin_listen_port);
print('domain_path                 : [%s]' % domain_path);
print('production_mode             : [%s]' % production_mode);
print('admin name                  : [%s]' % admin_name);
print('administration_port_enabled : [%s]' % administration_port_enabled);

# Open default domain template
# ============================
print "Reading Template"
readTemplate("{{wlshome}}/common/templates/wls/wls.jar")
print "Done with it"

print "Set Domain Name"
set('Name', domain_name)
setOption('DomainName', domain_name)
print "Done with it"

# Set Administration Port - Requires SSL
# =======================================
print "Set Admin port"
if administration_port_enabled != "false":
   set('AdministrationPort', administration_port)
   set('AdministrationPortEnabled', 'true')
   print "Done with it"
print "Skipped it"


# Configure the Administration Server and SSL port.
# =================================================
print "Configuring Admin Server"
cd('/Servers/AdminServer')
set('Name', admin_name)
set('ListenAddress', '')
set('ListenPort', admin_listen_port)
if administration_port_enabled != "false":
   create('AdminServer','SSL')
   cd('SSL/AdminServer')
   set('Enabled', 'True')
print "Done with it"

# Define the user password for weblogic
# =====================================
print "COnfiguring UserName"
cd(('/Security/%s/User/weblogic') % domain_name)
cmo.setName("{{domain_username}}")
cmo.setPassword("{{domain_password}}")
print "Done with it"

# Create Machine
# ================
print "Creating Machines"
cd('/')
mn = create('{{ groups['app'][0] }}','Machine')
machine_name = '{{ groups['app'][0] }}'
if (machine_name != ""):
	print "\tSetting Machine Name",machine_name
	mn.setName(machine_name)
print "Done with First Machine"
cd('/')
mn = create('{{ groups['app'][1] }}','Machine')
machine_name = '{{ groups['app'][1] }}'
if (machine_name != ""):
	print "\tSetting Machine Name",machine_name
	mn.setName(machine_name)
print "Done with it"

# Create Managed Servers
# =======================
print "Creating Managed Server"
cd ('/')
sobj = create('{{ManagedServer1_Name}}','Server')
sobj.setName('{{ManagedServer1_Name}}')
sobj.setListenPort(int('{{ManagedServer1_Port}}'))
# Listen on all available IPs and channels
sobj.setListenAddress('')
cd ('/')
print "Creating Managed Server2"
sobj = create('{{ManagedServer2_Name}}','Server')
sobj.setName('{{ManagedServer2_Name}}')
sobj.setListenPort(int('{{ManagedServer2_Port}}'))
# Listen on all available IPs and channels
sobj.setListenAddress('')
print "Done with it"

# Create Cluster
# ==================
print "Creating Cluster"
cd ('/')
cobj = create('{{ClusterName}}','Cluster')
print "Done with it"

# Write the domain and close the domain template
# ==============================================
print "Over writing domain"
setOption('OverwriteDomain', 'true')
setOption('ServerStartMode',production_mode)
print "Done with it"

# Create Node Manager
# ===================
print "Node Manager's time"
cd('/NMProperties')
set('ListenAddress','')
set('ListenPort',5556)
set('CrashRecoveryEnabled', 'true')
set('NativeVersionEnabled', 'true')
set('StartScriptEnabled', 'false')
set('SecureListener', 'false')
set('LogLevel', 'FINEST')
print "Done with it"



# Write Domain
# ============
print "Writing Domain"
writeDomain(domain_path)
closeTemplate()
print "Done with it"

# Exit WLST
# =========
print "Exitting"
exit()
